# Instructions
# First time you need to run the pipeline manually, so that the .jar files are stored in cache
# Enable Container Registry in GitLab
# You might need to create a personal access token or a deploy token to execute the Docker login command if it fails
# Need previously created swarm in a node in EC2 of AWS (you can do that by docker swarm init + deploy-swarm job)
# Comment the rules in the build and package stages, or manually run the pipeline, if the pipeline failed at some point
# and the modules were not packaged (since no changes were detected). You need those to build the Docker images

stages:
  - build
  - package
  - publish
  - deploy

variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Deploy variables depending on the number of instances
  # Premium tier
  MANAGER_NODE_IP: 3-125-160-233 # Set Elastic IPs in AWS so that it doesn't change between reboots

  # Free tier
  MANAGER_NODE_1_IP: 18-192-123-179
  MANAGER_NODE_2_IP: 3-65-206-48
  MANAGER_NODE_3_IP: 3-71-102-67
  WORKER_NODE_4_IP: 3-68-167-114
  WORKER_NODE_5_IP: 18-198-189-175
  WORKER_NODE_6_IP: 3-71-50-136
  WORKER_NODE_7_IP: 3-64-179-39
  WORKER_NODE_8_IP: 18-196-237-248

  # Copy from a manager node after manually initializing a swarm in an instance
  SWARM_JOIN_WORKER: docker swarm join --token SWMTKN-1-09zri1p91luc8pi8qb02o72mb2292te5phwlh8ddmc9gfbih7f-5v4g1gz4a5143fbxzuvvufk5u 172.31.24.49:2377
  SWARM_JOIN_MANAGER: docker swarm join --token SWMTKN-1-09zri1p91luc8pi8qb02o72mb2292te5phwlh8ddmc9gfbih7f-dtj3tzbekksyx2mz60m32hsw9 172.31.24.49:2377

cache:
  paths:
    - .m2/repository

build-boxmanagement:
  stage: build
  image: maven:latest
  #rules:
  #  - changes:
  #      - backend/boxmanagement/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #      - backend/boxmanagement/Dockerfile
  #    when: never
  script:
    - cd ./backend/boxmanagement
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

build-deliverymanagement:
    stage: build
    image: maven:latest
    #rules:
    #  - changes:
    #    - backend/deliverymanagement/src/**/* #All files in the directory and in subsequent subdirectories
    #  - changes:
    #    - backend/deliverymanagement/Dockerfile
    #    when: never
    script:
      - cd ./backend/deliverymanagement
      - chmod +x mvnw
      - ./mvnw $MAVEN_CLI_OPTS clean compile
  
build-emailnotification:
  stage: build
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/emailnotification/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/emailnotification/Dockerfile
  #    when: never
  script:
    - cd ./backend/emailnotification
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

build-eureka-discovery-service:
  stage: build
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/eureka-discovery-service/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/eureka-discovery-service/Dockerfile
  #    when: never
  script:
    - cd ./backend/eureka-discovery-service
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

build-gateway:
  stage: build
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/gateway/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/gateway/Dockerfile
  #    when: never
  script:
    - cd ./backend/gateway
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

build-usermngmt:
  stage: build
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/usermngmt/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/usermngmt/Dockerfile
  #    when: never
  script:
    - cd ./backend/usermngmt
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

package-boxmanagement:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/boxmanagement/src/**/* #All files in the directory and in subsequent surectories
  #  - changes:
  #    - backend/boxmanagement/Dockerfile
  #    when: never
  script:
    - cd ./backend/boxmanagement
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  #cache vs artifact: cache can be used in different pipelines, but expires faster and has a complicated background
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/boxmanagement/target/boxmanagement-0.0.1-SNAPSHOT.jar
      - backend/boxmanagement/target/classes/public.key
  #artifacts:
  #  expire_in: 3 days
  #  paths:
  #    - backend/boxmanagement/target/boxmanagement-0.0.1-SNAPSHOT.jar

package-deliverymanagement:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/deliverymanagement/src/**/*
  #  - changes:
  #    - backend/deliverymanagement/Dockerfile
  #    when: never
  script:
    - cd ./backend/deliverymanagement
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/deliverymanagement/target/deliverymanagement-0.0.1-SNAPSHOT.jar
      - backend/deliverymanagement/target/classes/public.key

package-emailnotification:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/emailnotification/src/**/*
  #  - changes:
  #    - backend/emailnotification/Dockerfile
  #    when: never
  script:
    - cd ./backend/emailnotification
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/emailnotification/target/emailnotification-0.0.1-SNAPSHOT.jar
      - backend/emailnotification/target/classes/public.key

package-eureka-discovery-service:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/eureka-discovery-service/src/**/*
  #  - changes:
  #    - backend/eureka-discovery-service/Dockerfile
  #    when: never
  script:
    - cd ./backend/eureka-discovery-service
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/eureka-discovery-service/target/eureka-discovery-service-0.0.1-SNAPSHOT.jar

package-gateway:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/gateway/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/gateway/Dockerfile
  #    when: never
  script:
    - cd ./backend/gateway
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/gateway/target/gateway-0.0.1-SNAPSHOT.jar

package-usermngmt:
  stage: package
  image: maven:latest
  #rules:
  #  - changes:
  #    - backend/usernmgnmt/src/**/* #All files in the directory and in subsequent subdirectories
  #  - changes:
  #    - backend/usernmgnmt/Dockerfile
  #    when: never
  script:
    - cd ./backend/usermngmt
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    expire_in: 3 days
    untracked: true
    paths:
      - backend/usermngmt/target/usermngmt-0.0.1-SNAPSHOT.jar
      - backend/usermngmt/target/classes/ase_project.keystore

docker-boxmanagement:
  stage: publish
  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
  #tags:
  #  - shell
  when: always
  dependencies:
    - package-boxmanagement
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/boxmanagement
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-boxmanagement:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-boxmanagement:latest

docker-deliverymanagement:
  stage: publish
  when: always
  dependencies:
    - package-deliverymanagement
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/deliverymanagement
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-deliverymanagement:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-deliverymanagement:latest

docker-emailnotification:
  stage: publish
  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
  #tags:
  #  - shell
  when: always
  dependencies:
    - package-emailnotification
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/emailnotification
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-emailnotification:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-emailnotification:latest

docker-eureka-discovery-service:
  stage: publish
  when: always
  dependencies:
    - package-eureka-discovery-service
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/eureka-discovery-service
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-discovery:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-discovery:latest

docker-gateway:
  stage: publish
  when: always
  dependencies:
    - package-gateway
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/gateway
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-gateway:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-gateway:latest

docker-usermngmt:
  stage: publish
  when: always
  dependencies:
    - package-usermngmt
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd $CI_PROJECT_DIR/backend/usermngmt
    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-usermngmt:latest .
    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-usermngmt:latest

docker-frontend:
  stage: publish
  when: always
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - cd $CI_PROJECT_DIR/frontend/ase_frontend
  - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-frontend:latest .
  - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-frontend:latest

# Use when you want to initiate a swarm
# Modify depending on how you want to configure your swarm (number of instances, worker-manager balance...)
deploy-swarm:
  stage: deploy
  when: manual
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # Create managers and workers
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_1_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_2_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_MANAGER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_3_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_MANAGER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$WORKER_NODE_4_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-3-121-74-248.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-35-158-96-207.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-3-67-93-11.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-18-156-174-18.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"

# For deploying the microservices to a premium-tier instance of AWS. Required, since the free-tier doesn't have enough workload to carry the components
deploy-premium:
  stage: deploy
  when: always
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$MANAGER_NODE_IP.eu-central-1.compute.amazonaws.com:~/
    # - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_IP.eu-central-1.compute.amazonaws.com "export GITLAB_REGISTRY_PATH=gitlab.lrz.de:5005/ase-21-22/team-32/ase_project/; docker stack deploy --compose-file docker-compose.yml stack1"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_IP.eu-central-1.compute.amazonaws.com "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; export GITLAB_REGISTRY_PATH=gitlab.lrz.de:5005/ase-21-22/team-32/ase_project/; docker-compose pull; docker-compose restart || docker-compose up"

# For deploying a scaled version of the microservices
# Depending on how many instances you have, you must change the number of scp commands you execute. You need one for each instance
deploy-scale:
  stage: deploy
  when: manual
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$MANAGER_NODE_1_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$MANAGER_NODE_2_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$MANAGER_NODE_3_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$WORKER_NODE_4_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$WORKER_NODE_5_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$WORKER_NODE_6_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$WORKER_NODE_7_IP.eu-central-1.compute.amazonaws.com:~/
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml .env ubuntu@ec2-$WORKER_NODE_8_IP.eu-central-1.compute.amazonaws.com:~/

    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_1_IP.eu-central-1.compute.amazonaws.com "export GITLAB_REGISTRY_PATH=gitlab.lrz.de:5005/ase-21-22/team-32/ase_project/; docker stack deploy --compose-file docker-compose.yml stack1"
