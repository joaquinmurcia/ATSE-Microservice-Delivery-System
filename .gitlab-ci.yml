# First time you need to run the pipeline manually, so that the .jar files are stored in cache
# Enable Container Registry in GitLab
# Have some access token to execute the Docker login command
# Need previously created swarm in a node in EC2 of AWS

stages:
  - build
  - package
  - publish
  - deploy

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  MANAGER_NODE_IP: 18-198-6-63
  WORKER_NODE_1_IP: 3-127-188-141
  WORKER_NODE_2_IP: 3-66-208-5
  WORKER_NODE_3_IP: 3-71-35-207
  WORKER_NODE_4_IP: 54-93-52-14
  SWARM_JOIN_WORKER: docker swarm join --token SWMTKN-1-2t8as871wyfochzz6m7jzo9gr94fjov72k3tn1bgruly528yix-dztyqfnp97e9uu60e0yy38o6s 18.198.6.63:2377

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
#
#build-boxmanagement:
#  stage: build
#  image: maven:latest
#  rules:
#    - changes:
#        - backend/boxmanagement/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#        - backend/boxmanagement/Dockerfile
#      when: never
#  script:
#    - cd ./backend/boxmanagement
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS clean compile
#
#build-deliverymanagement:
#    stage: build
#    image: maven:latest
#    rules:
#      - changes:
#        - backend/deliverymanagement/src/**/* #All files in the directory and in subsequent subdirectories
#      - changes:
#        - backend/deliverymanagement/Dockerfile
#        when: never
#    script:
#      - cd ./backend/deliverymanagement
#      - chmod +x mvnw
#      - ./mvnw $MAVEN_CLI_OPTS clean compile
#  
#build-emailnotification:
#  stage: build
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/emailnotification/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/emailnotification/Dockerfile
#      when: never
#  script:
#    - cd ./backend/emailnotification
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS clean compile
#
#build-eureka-discovery-service:
#  stage: build
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/eureka-discovery-service/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/eureka-discovery-service/Dockerfile
#      when: never
#  script:
#    - cd ./backend/eureka-discovery-service
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS clean compile
#
#build-gateway:
#  stage: build
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/gateway/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/gateway/Dockerfile
#      when: never
#  script:
#    - cd ./backend/gateway
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS clean compile
#
#build-usermngmt:
#  stage: build
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/usermngmt/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/usermngmt/Dockerfile
#      when: never
#  script:
#    - cd ./backend/usermngmt
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS clean compile
#
#package-boxmanagement:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/boxmanagement/src/**/* #All files in the directory and in subsequent surectories
#    - changes:
#      - backend/boxmanagement/Dockerfile
#      when: never
#  script:
#    - cd ./backend/boxmanagement
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  #cache vs artifact: cache can be used in different pipelines, but expires faster and has a complicated background
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/boxmanagement/target/boxmanagement-0.0.1-SNAPSHOT.jar
#      - backend/boxmanagement/target/classes/public.key
#  #artifacts:
#  #  expire_in: 3 days
#  #  paths:
#  #    - backend/boxmanagement/target/boxmanagement-0.0.1-SNAPSHOT.jar
#
#package-deliverymanagement:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/deliverymanagement/src/**/*
#    - changes:
#      - backend/deliverymanagement/Dockerfile
#      when: never
#  script:
#    - cd ./backend/deliverymanagement
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/deliverymanagement/target/deliverymanagement-0.0.1-SNAPSHOT.jar
#      - backend/deliverymanagement/target/classes/public.key
#
#package-emailnotification:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/emailnotification/src/**/*
#    - changes:
#      - backend/emailnotification/Dockerfile
#      when: never
#  script:
#    - cd ./backend/emailnotification
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/emailnotification/target/emailnotification-0.0.1-SNAPSHOT.jar
#      - backend/emailnotification/target/classes/public.key
#
#package-eureka-discovery-service:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/eureka-discovery-service/src/**/*
#    - changes:
#      - backend/eureka-discovery-service/Dockerfile
#      when: never
#  script:
#    - cd ./backend/eureka-discovery-service
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/eureka-discovery-service/target/eureka-discovery-service-0.0.1-SNAPSHOT.jar
#
#package-gateway:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/gateway/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/gateway/Dockerfile
#      when: never
#  script:
#    - cd ./backend/gateway
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/gateway/target/gateway-0.0.1-SNAPSHOT.jar
#
#package-usermngmt:
#  stage: package
#  image: maven:latest
#  rules:
#    - changes:
#      - backend/usernmgnmt/src/**/* #All files in the directory and in subsequent subdirectories
#    - changes:
#      - backend/usernmgnmt/Dockerfile
#      when: never
#  script:
#    - cd ./backend/usermngmt
#    - chmod +x mvnw
#    - ./mvnw $MAVEN_CLI_OPTS package -DskipTests
#  artifacts:
#    expire_in: 3 days
#    untracked: true
#    paths:
#      - backend/usermngmt/target/usermngmt-0.0.1-SNAPSHOT.jar
#      - backend/usermngmt/target/classes/ase_project.keystore
#
#docker-boxmanagement:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-boxmanagement
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/boxmanagement
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-boxmanagement:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-boxmanagement:latest
#
#docker-deliverymanagement:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-deliverymanagement
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/deliverymanagement
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-deliverymanagement:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-deliverymanagement:latest
#
#docker-emailnotification:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-emailnotification
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/emailnotification
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-emailnotification:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-emailnotification:latest
#
#docker-eureka-discovery-service:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-eureka-discovery-service
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/eureka-discovery-service
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-discovery:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-discovery:latest
#
#docker-gateway:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-gateway
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/gateway
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-gateway:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-gateway:latest
#
#docker-usermngmt:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  dependencies:
#    - package-usermngmt
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - cd $CI_PROJECT_DIR/backend/usermngmt
#    - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-usermngmt:latest .
#    - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-usermngmt:latest
#
#docker-frontend:
#  stage: publish
#  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
#  #tags:
#  #  - shell
#  when: always
#  script:
#  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#  - cd $CI_PROJECT_DIR/frontend/ase_frontend
#  - docker build -t $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-frontend:latest .
#  - docker image push $CI_REGISTRY/ase-21-22/team-32/ase_project/ase-frontend:latest

deploy-setup:
  stage: deploy
  when: manual
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # Create workers
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$WORKER_NODE_1_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$WORKER_NODE_2_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$WORKER_NODE_3_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$WORKER_NODE_4_IP.eu-central-1.compute.amazonaws.com "$SWARM_JOIN_WORKER"
    # Deploy services (scalability part)
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-$MANAGER_NODE_IP.eu-central-1.compute.amazonaws.com "docker service create --replicas 1 "


deploy:
  stage: deploy
  when: always
  script:
    - scp -o StrictHostKeyChecking=no -r ./docker-compose.yml ubuntu@ec2-18-156-78-238.eu-central-1.compute.amazonaws.com:~/
    # TODO: - ssh -o StrictHostKeyChecking=no ubuntu@ec2-18-156-78-238.eu-central-1.compute.amazonaws.com "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; export GITLAB_REGISTRY_PATH=$CI_REGISTRY/ase-21-22/team-32/ase_project/; docker-compose pull; docker-compose restart || docker-compose up"
    - ssh -o StrictHostKeyChecking=no ubuntu@ec2-18-156-78-238.eu-central-1.compute.amazonaws.com "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; export GITLAB_REGISTRY_PATH=$CI_REGISTRY/ase-21-22/team-32/ase_project/; docker-compose pull; docker-compose up ase-discovery"


#artifacts:
#  paths:
#    - target/demo-0.0.1-SNAPSHOT.jar


#testtt:
#  stage: test
#  script:
#    - mvn $MAVEN_CLI_OPTS test
