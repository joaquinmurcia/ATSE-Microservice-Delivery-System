stages:
  - build
  - package
  - publish

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

build-asedeliverymodels:
  stage: build
  image: maven:latest
  rules:
    - changes:
        - backend/asedeliverymodels/src/**/* #All files in the directory and in subsequent subdirectories
    - changes:
        - backend/asedeliverymodels/Dockerfile
      when: never
  cache:
    paths:
      - backend/asedeliverymodels/target/asedeliverymodels-0.0.1-SNAPSHOT.jar
  script:
    - cd ./backend/asedeliverymodels
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean package

build-boxmanagement:
  stage: build
  image: maven:latest
  rules:
    - changes:
        - backend/boxmanagement/src/**/* #All files in the directory and in subsequent subdirectories
    - changes:
        - backend/boxmanagement/Dockerfile
      when: never
  cache:
    paths:
      - backend/asedeliverymodels/target/asedeliverymodels-0.0.1-SNAPSHOT.jar
  script:
    - cd ./backend/boxmanagement
    - chmod +x mvnw
    - ./mvnw $MAVEN_CLI_OPTS clean compile

  #build-deliverymanagement:
  #  stage: build
  #  image: maven:latest
  #  rules:
  #    - changes:
  #      - backend/deliverymanagement/src/**/* #All files in the directory and in subsequent subdirectories
  #    - changes:
  #      - backend/deliverymanagement/Dockerfile
  #      when: never
  #  script:
  #    - cd ./backend/deliverymanagement
  #    - chmod +x mvnw
  #    - ./mvnw $MAVEN_CLI_OPTS clean compile
  #
  #build-emailnotification:
  #  stage: build
  #  image: maven:latest
  #  rules:
  #    - changes:
  #      - backend/emailnotification/src/**/* #All files in the directory and in subsequent subdirectories
  #    - changes:
  #      - backend/emailnotification/Dockerfile
  #      when: never
  #  script:
  #    - cd ./backend/emailnotification
  #    - chmod +x mvnw
  #    - ./mvnw $MAVEN_CLI_OPTS clean compile
  #
  #build-eureka-discovery-service:
  #  stage: build
  #  image: maven:latest
  #  rules:
  #    - changes:
  #      - backend/eureka-discovery-service/src/**/* #All files in the directory and in subsequent subdirectories
  #    - changes:
  #      - backend/eureka-discovery-service/Dockerfile
  #      when: never
  #  script:
  #    - cd ./backend/eureka-discovery-service
  #    - chmod +x mvnw
  #    - ./mvnw $MAVEN_CLI_OPTS clean compile
  #
  #build-gateway:
  #  stage: build
  #  image: maven:latest
  #  rules:
  #    - changes:
  #      - backend/gateway/src/**/* #All files in the directory and in subsequent subdirectories
  #    - changes:
  #      - backend/gateway/Dockerfile
  #      when: never
  #  script:
  #    - cd ./backend/gateway
  #    - chmod +x mvnw
  #    - ./mvnw $MAVEN_CLI_OPTS clean compile
  #
  #build-usernmgnmt:
  #  stage: build
  #  image: maven:latest
  #  rules:
  #    - changes:
  #      - backend/usernmgnmt/src/**/* #All files in the directory and in subsequent subdirectories
  #    - changes:
  #      - backend/usernmgnmt/Dockerfile
  #      when: never
  #  script:
  #    - cd ./backend/usernmgnmt
  #    - chmod +x mvnw
  #    - ./mvnw $MAVEN_CLI_OPTS clean compile

  #package:
  #  stage: package
  #  image: java:8
  #  rules:
  #    - changes:
  #      - compose-app/backend-service/src/**/*
  #  script:
  #    - cd ./compose-app/backend-service
  #    - chmod +x mvnw
  #    - ./mvnw package
  #  #cache vs artifact: cache can be used in different pipelines, but expires faster and has a complicated background
  #  cache:
  #    paths:
  #      - compose-app/backend-service/target/backend-service-0.0.1-SNAPSHOT.jar
  #  #artifacts:
  #  #  expire_in: 1 day
  #  #  paths:
  #  #    - compose-app/backend-service/target/backend-service-0.0.1-SNAPSHOT.jar
  #
  #docker-build:
  #  stage: publish
  #  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
  #  #tags:
  #  #  - shell
  #  when: always
  #  cache:
  #    paths:
  #      - compose-app/backend-service/target/backend-service-0.0.1-SNAPSHOT.jar
  #  script:
  #    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  #    - cd $CI_PROJECT_DIR/compose-app/backend-service
  #    - docker build -t $CI_REGISTRY/group/project/backend-12:latest .
  #    - docker build -t $CI_REGISTRY/group/project/frontend-12:latest .
  #
  #docker-push:
  #  stage: publish
  #  when: always
  #  # the tag 'shell' advices only GitLab runners using this tag to pick up that job
  #  #tags:
  #  #  - shell
  #  script:
  #    - docker login -u glpat-VzjTqUBLaYp52-GZTnHy $CI_REGISTRY #! You need to create a deploy token with read and write registry #permissions (bug)
  #    - docker push $CI_REGISTRY/group/project/backend-12:latest
  #    - docker push $CI_REGISTRY/group/project/frontend-12:latest



#artifacts:
#  paths:
#    - target/demo-0.0.1-SNAPSHOT.jar


#testt:
#  stage: test
#  script:
#    - mvn $MAVEN_CLI_OPTS test
